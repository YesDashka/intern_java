Index: src/main/java/com/example/lecture1/task2/Main1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/lecture1/task2/Main1.java b/src/main/java/com/example/lecture1/task2/Main1.java
new file mode 100644
--- /dev/null	(date 1667998973543)
+++ b/src/main/java/com/example/lecture1/task2/Main1.java	(date 1667998973543)
@@ -0,0 +1,32 @@
+package com.example.lecture1.task2;
+
+import java.util.*;
+import java.util.stream.Collectors;
+
+public class Main1 {
+    public static void main(String[] args) {
+        List<String> listOfStrings = List.of("#How #you are #you?", "#Dasha #hello.start", "#love #Dasha as", "#love,#love", "#love", "#f #c #a", "#a", "#b", "#love", "#a");
+        System.out.println(returnTop5HashTags(listOfStrings));
+    }
+
+    public static List<Map.Entry<String, Long>> returnTop5HashTags(List<String> listOfStrings){
+        List<List<String>> listOfListOfHashTagStrings = new ArrayList<>();
+        for(String str: listOfStrings){
+            List<String> listOfHashTagStrings = Arrays.stream(str.split("[!?.,\\s]")).filter(p -> p.startsWith("#")).distinct().collect(Collectors.toList());
+            listOfListOfHashTagStrings.add(listOfHashTagStrings);
+        }
+        System.out.println(listOfStrings);
+
+        return listOfListOfHashTagStrings.stream().flatMap(Collection::stream)
+                .collect(Collectors.toList())
+                .stream()
+                .collect(Collectors.collectingAndThen(Collectors.groupingBy(s -> s, Collectors.counting()), s -> {
+                    TreeSet<Map.Entry<String, Long>> entries = new TreeSet<>(new TreeSet<>((s1, s2) -> Long.compare(s2.getValue(), s1.getValue())));
+                    entries.addAll(s.entrySet());
+                    return entries;
+                }))
+                .stream()
+                .limit(5)
+                .collect(Collectors.toList());
+    }
+}
